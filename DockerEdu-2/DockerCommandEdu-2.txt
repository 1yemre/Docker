Docker Commands
docker info
docker ps    -> All container list
docker ps -a -> All containers that are stopped
docker run  centos:7 echo "hello world"
docker run  centos:7 ps -ef  =  docker container ls-a
docker container run -it centos:7 bash  -> container create
docker container start  (container Id)  -> container start
docker  container exec -it c555(container Id) bash  -> container connection
docker container ls -a --no-trunc   ->  detials container ıd
docker container ls -a -q  -> container ID liST
docker container ls -a -l  -> last created container
docker container ls -a --filter "" -> container list 
docker container run centos:7 ping 127.0.0.1 -c 10
docker container  logs --tail 10 e632
docker container logs -f e632
docker container run -d(detached  mode) tomcat
docker container start -a b2e  (container conneciton)
docker container  logs -f b2e
docker container kill b2e 
docker container inspect b2e  (container details) 
docker container inspect b2e | grep IPAddress  
docker container rm b2e (container delete)

port mapping:::

docker container run -d -p  5000(fiziksel host üzerinden containera erişim için gerekli):80(direkt container portuna erişim istiyorsak)
docker container run -d -p 5000:80 nginx
docker container port 2dd  -> gives which port is open


notepad (vi) Dockerfile
docker image build -t my nginx
docker image build -t my_nginx .



docker plugin:::
for information  details =>https://docs.docker.com/engine/extend/plugins_graphdriver/
 

docker plugin install  grafana/loki-docker-driver
docker plugin ls 

docker plugin disable grafana/loki-docker-driver:latest -> pluging disable 
docker plugin enable grafana/loki-docker-driver:latest -> pluging enable 
docker plugin ins  -> docker plugin COMMAND
docker plugin inspect  grafana/loki-docker-driver  -> plugin info 
docker plugin rm grafana/loki-docker-driver:latest  -> plugin remove 


docker search mysql -> images version
docker search alpine 

Docker File Comments:


vi Dockerfile -> new docker file 

from centos -> base image
run -> prosess playing 
cmd
label -> bir key , imaj sahibini detayı yada bir value değeri için 
maintainer      ->  dirkt dockerfile dosyasında oluşturulan kişi ile ilgili bilgi vermek için  oluşturan kişi hakkında isim mail adresi vs.
expose -> containerde port numarsı açmak için kullanılır.
env -> container  ortam değişkeni tanımlamak için kullanılır.
add -> conatiner içerisine internetten yada local bir alandan dosya kopyalamaya yardımcı olur. 
copy -> belirtilen dosyaları dirket container içerisine kopyalar add den farkı  herhangi bir kaynaktan dosya  kopyalar
entrypoint -> container çalıştığında varsayılan parametre tanımalamk için  kullanılır. kısa paramterleri sabitlemk için 
volume-> volume path taınmlamak için kullanılır.
user ->  hangi kullanıcı üzerinde işlem yapılacaksa  belirtmek için kullanılır. (kullanıcı tanımlaması )
workdir -> containerlarin  çalışma dizinin belirtmek için kullanılır.


Docker File ex-1 :

vi Dockerfile 
from ubuntu 
run  apt-get  -y update\
     apt-get  -y  install nano\
     apt-get  -y  install httpd

docker image 

docker image buld -t 
docker image build -t byubuntuemr .


From nginx 
Run rm /etc/nginx/ngix.conf /etc/nginx/conf/default.conf
copy content /usr/shere/nginx/html
copy conf /etc/nginx




FROM ubuntu
HAINTAINER by 
RUN apt-get -y update 
RUN apt-get -y upgrade
RUN apt-get -y insatall nano
RUN apt-get -y update python 3 python3-pip
COPY . /app
WORKDIR /app
EXPOSE 5000
ENTRYPOINT echo "hello!"


docker file multi stage:

vi hello.c


int(main){
printf("hello \n");
return 0;
}

apk add install gcc
gcc -Wall hello.c -o hello
./hello 


vi Dockerfile

FROM alpine3.5
Run apk update  &&\
apk add --update alpine-adk
RUN mkdir /app
WORKDIR /app
COPY hello.c /app
RUN mkdir bin
RUN gcc -Wall hello.c -c bin/hello 
CMD /app/bin/hello 


docker image build -t my-app-large  .



vi Dockerfile

FROM alpine3.5 AS build
Run apk update  &&\
apk add --update alpine-adk
RUN mkdir /app
WORKDIR /app
COPY hello.c /app
RUN mkdir bin
RUN gcc -Wall hello.c -c bin/hello 


FROM alpine 3.5
COPY --from=build /app/bin/hello /apk/hello
CMD /app/hello 

docker image build -t my-app-small .



docker pull anda push methods :: 

pull:register üzerinden imagleri locale indrimek için kullanılır.


push : kendi oluşturduğumuz image'ı kendi regiterlarıma göndermek istiyorsam  kullanmı olduğumuz komuttur.





docker pull nginx
docker container run nginx





